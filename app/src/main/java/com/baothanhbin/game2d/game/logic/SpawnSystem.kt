package com.baothanhbin.game2d.game.logic

import com.baothanhbin.game2d.game.model.*
import kotlin.random.Random

/**
 * H·ªá th·ªëng spawn enemies
 */
class SpawnSystem {
    
    companion object {
        private const val BASE_SPAWN_DELAY_MS = 1200L // 1.2 gi√¢y ƒë·ªÉ tr√°nh spawn li√™n ti·∫øp
        private const val MIN_SPAWN_DELAY_MS = 800L   // T·ªëi thi·ªÉu 0.8 gi√¢y
        private const val WAVE_SPAWN_DELAY_REDUCTION = 100L // Gi·∫£m 100ms m·ªói wave
    }
    
    /**
     * Spawn enemies trong combat phase
     * C·∫≠p nh·∫≠t: Spawn random tr√™n to√†n b·ªô m√†n h√¨nh
     */
    fun spawnEnemies(state: GameState, deltaTimeMs: Long): GameState {
        println("SPAWN DEBUG: spawnEnemies called - day: ${state.player.day}, phase: ${state.roundPhase}, remaining: ${state.remainingEnemiesToSpawn}")
        
        val currentTime = System.currentTimeMillis()
        
        if (state.roundPhase != RoundPhase.COMBAT) {
            println("SPAWN DEBUG: Not in combat phase")
            return state
        }
        // N·∫øu l√† boss day v√† ƒë√£ spawn boss, kh√¥ng spawn th√™m g√¨
        if (shouldSpawnBoss(state.gameMode, state.player.day)) {
            val hasBossInDay = state.enemies.any { it.isBoss && it.isAlive }
            if (hasBossInDay) {
                println("SPAWN DEBUG: Boss day - boss already spawned, no more spawning")
                return state.copy(
                    enemiesSpawned = state.totalEnemiesPerDay, // ƒê√°nh d·∫•u ƒë√£ spawn ƒë·ªß
                    lastSpawnTimeMs = currentTime
                )
            }
        }
        
        if (state.remainingEnemiesToSpawn <= 0) {
            println("SPAWN DEBUG: No more enemies to spawn (remaining: ${state.remainingEnemiesToSpawn})")
            return state
        }
        val timeSinceLastSpawn = currentTime - state.lastSpawnTimeMs
        
        val spawnDelay = calculateSpawnDelay(state.player.day)
        
        println("SPAWN DEBUG: timeSinceLastSpawn=$timeSinceLastSpawn, spawnDelay=$spawnDelay")
        
        if (timeSinceLastSpawn >= spawnDelay) {
            // Debug: Log current day
            println("SPAWN DEBUG: Current day = ${state.player.day}, shouldSpawnBoss = ${shouldSpawnBoss(state.gameMode, state.player.day)}")
            
            // Spawn boss n·∫øu ·ªü v√≤ng 5, 10, 15, n·∫øu kh√¥ng spawn enemy th∆∞·ªùng
            if (shouldSpawnBoss(state.gameMode, state.player.day)) {
                // Ph√°t c·∫£nh b√°o boss m·ªôt tick tr∆∞·ªõc khi spawn n·∫øu ch∆∞a c·∫£nh b√°o
                if (state.lastBossWarningDay != state.player.day) {
                    return state.addBossWarningForDay(state.player.day).copy(
                        lastSpawnTimeMs = currentTime // Delay vi·ªác spawn boss ƒë·∫øn tick sau
                    )
                }
                println("SPAWN DEBUG: üêâ CREATING BOSS! Day: ${state.player.day}")
                val boss = createBossEnemy(state.player.day, state.player)
                // Boss thay th·∫ø HO√ÄN TO√ÄN t·∫•t c·∫£ enemies trong ng√†y - ch·ªâ spawn 1 boss duy nh·∫•t
                return state.copy(
                    enemies = state.enemies + boss,
                    enemiesSpawned = state.totalEnemiesPerDay, // ƒê√°nh d·∫•u ƒë√£ spawn ƒë·ªß
                    lastSpawnTimeMs = currentTime
                )
            } else {
                println("SPAWN DEBUG: ‚úÖ CREATING NEW ENEMY! Day: ${state.player.day}, Remaining to spawn: ${state.remainingEnemiesToSpawn - 1}")
                val newEnemy = createEnemy(state.gameMode, state.player.day, state.player, state.enemies)
                return state.spawnEnemy(newEnemy).copy(
                    lastSpawnTimeMs = currentTime
                )
            }
        } else {
            println("SPAWN DEBUG: ‚è≥ Waiting for spawn delay... (${spawnDelay - timeSinceLastSpawn}ms remaining)")
        }
        
        return state
    }
    
    /**
     * T√≠nh to√°n spawn delay theo day
     */
    private fun calculateSpawnDelay(day: Int): Long {
        val baseDelay = BASE_SPAWN_DELAY_MS - (day * WAVE_SPAWN_DELAY_REDUCTION)
        
        return baseDelay.coerceAtLeast(MIN_SPAWN_DELAY_MS)
    }
    
    /**
     * T·∫°o enemy m·ªõi
     * C·∫≠p nh·∫≠t: Spawn random tr√™n to√†n b·ªô m√†n h√¨nh v·ªõi tr√°nh ƒë√® l√™n nhau
     */
    private fun createEnemy(mode: GameMode, day: Int, player: Player, existingEnemies: List<Enemy> = emptyList()): Enemy {
        // T√¨m v·ªã tr√≠ spawn kh√¥ng b·ªã ƒë√® l√™n enemies hi·ªán c√≥
        var spawnX: Float
        var spawnY: Float
        var attempts = 0
        val maxAttempts = 10
        
        do {
            val columnIndex = Random.nextInt(0, 5)
            spawnX = getColumnCenterX(columnIndex)
            spawnY = -50f - Random.nextInt(0, 50) // Spawn ·ªü tr√™n m√†n h√¨nh v·ªõi random offset l·ªõn h∆°n
            
            // Ki·ªÉm tra collision v·ªõi enemies hi·ªán c√≥
            val hasCollision = existingEnemies.any { enemy ->
                val distance = kotlin.math.sqrt(
                    (enemy.x - spawnX) * (enemy.x - spawnX) + 
                    (enemy.y - spawnY) * (enemy.y - spawnY)
                )
                distance < 100f // Kho·∫£ng c√°ch t·ªëi thi·ªÉu 100 pixels
            }
            
            attempts++
            if (!hasCollision || attempts >= maxAttempts) break
            
        } while (attempts < maxAttempts)
        
        println("SPAWN DEBUG: Spawning enemy at position ($spawnX, $spawnY) after $attempts attempts")
        
        // Ch·ªçn archetype theo t·ªâ l·ªá
        val archetypeWeights = listOf(
            EnemyArchetype.BASIC to 0.6f,
            EnemyArchetype.TANK to 0.2f,
            EnemyArchetype.FAST to 0.2f
        )
        val pick = Random.nextFloat()
        val archetype = when {
            pick < archetypeWeights[0].second -> archetypeWeights[0].first
            pick < archetypeWeights[0].second + archetypeWeights[1].second -> archetypeWeights[1].first
            else -> archetypeWeights[2].first
        }
        // Ch·ªçn sprite theo archetype ƒë·ªÉ ph√¢n bi·ªát r√µ trong PlayArea
        val effectiveDay = if (mode == GameMode.SURVIVAL) (day * 2) else day
        val baseEnemy = Enemy.create(spawnX, spawnY, effectiveDay, archetype = archetype)
        val type = when (archetype) {
            EnemyArchetype.BASIC -> EnemyType.BASIC
            EnemyArchetype.TANK -> EnemyType.TANK
            EnemyArchetype.FAST -> EnemyType.FAST
        }
        return baseEnemy.copy(enemyType = type)
    }
    
    /**
     * T·∫°o boss enemy
     * C·∫≠p nh·∫≠t: Boss spawn random tr√™n to√†n b·ªô m√†n h√¨nh
     */
    private fun createBossEnemy(day: Int, player: Player, mode: GameMode = GameMode.CAMPAIGN): Enemy {
        // Boss lu√¥n spawn ·ªü √¥ ch√≠nh gi·ªØa (column 2)
        val columnIndex = 2
        
        val spawnX = getColumnCenterX(columnIndex)
        val spawnY = -100f - Random.nextInt(0, 20) // Boss spawn cao h∆°n v·ªõi random offset
        
        val scalingMultiplier = if (mode == GameMode.SURVIVAL) 1.5f else 1.0f
        val baseHp = (200f + day * 50f) * scalingMultiplier  // Boss tr√¢u h∆°n theo ch·∫ø ƒë·ªô
        val baseSpeed = 20f + day * 0.3f
        val baseReward = 10 + day * 2
        
        val bossType = getBossTypeForDay(day)
        val ability = when (bossType) {
            EnemyType.BOSS1 -> listOf(BossAbility.SHOOT_BULLETS, BossAbility.FREEZE_RANDOM_UNIT).random()
            EnemyType.BOSS2 -> BossAbility.SUMMON_MURID
            EnemyType.BOSS3 -> BossAbility.FREEZE_HEROES
            else -> BossAbility.SHOOT_BULLETS
        }
        val boss = Enemy(
            x = spawnX,
            y = spawnY,
            maxHp = baseHp,
            speed = baseSpeed,
            size = 180f, // Boss si√™u to
            reward = baseReward,
            enemyType = bossType,
            archetype = EnemyArchetype.BASIC,
            isBoss = true,
            bossAbility = ability,
            abilityCooldownMs = when (bossType) {
                EnemyType.BOSS3 -> 8000L // Boss3 c√≥ cooldown d√†i h∆°n (8 gi√¢y)
                else -> 5000L // Boss kh√°c v·∫´n 5 gi√¢y
            }
        )
        
        return boss
    }

    /**
     * T√≠nh to·∫° ƒë·ªô X gi·ªØa c·ªôt theo b·ªÅ r·ªông m√†n h√¨nh (5 c·ªôt)
     */
    private fun getColumnCenterX(columnIndex: Int): Float {
        val slotWidth = GameState.SCREEN_WIDTH / 5f
        return columnIndex * slotWidth + slotWidth / 2f
    }
    
    /**
     * Ki·ªÉm tra c√≥ n√™n spawn boss kh√¥ng (ch·ªâ ·ªü v√≤ng 5, 10, 15)
     */
    fun shouldSpawnBoss(mode: GameMode, day: Int): Boolean {
        return when (mode) {
            GameMode.SURVIVAL -> day % 5 == 0 // Boss m·ªói 5 ng√†y: 5,10,15,20,...
           /* GameMode.CAMPAIGN -> (day == 5 || day == 10 || day == 15)*/
            GameMode.CAMPAIGN -> (day == 2 || day == 3 || day == 4)
        }
    }
    
    /**
     * L·∫•y lo·∫°i boss theo ng√†y
     */
    private fun getBossTypeForDay(day: Int): EnemyType {
        return when (day) {
            2 -> EnemyType.BOSS1
            3 -> EnemyType.BOSS2
            4 -> EnemyType.BOSS3
            else -> EnemyType.BOSS1 // Default (kh√¥ng n√™n x·∫£y ra v·ªõi logic m·ªõi)
        }
    }

}
